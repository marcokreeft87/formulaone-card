name: Tests

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  hacs:
    runs-on: "ubuntu-latest"
    name: Test, Build, and Release
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "Europe/Amsterdam"
          timezoneMacos: "Europe/Amsterdam"
          timezoneWindows: "Central European Time"

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: "plugin"
          ignore: brands

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag from package.json version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.package_version.outputs.version }}
          git push origin v${{ steps.package_version.outputs.version }}

      - name: Get commit messages since last tag
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          LOG=$(git log ${LAST_TAG}..HEAD    --pretty=format:"- %s")
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get latest commit message
        id: get_commit
        run: echo "message=$(git log -1 --pretty=%B)" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.log }}
          tag_name: v${{ steps.package_version.outputs.version }}
          name: v${{ steps.package_version.outputs.version }}
          files: |
            formulaone-card.js
            formulaone-card.js.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print release ID
        run: echo "Release created with ID ${{ steps.create_release.outputs.id }}"
